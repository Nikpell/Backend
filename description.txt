Стек:
База данных - postgresql
sqlalchemy - для работы с базой данных
sanic - веб фреймворк(рекомендуемый, допускается альтернативный веб фрейморк НО НЕ DJANGO)
docker compose


Необходимо реализовать работу со следующими сущностями:
Пользователь
Администратор
Счет - имеет баланс, привязан к пользователю
Платеж(пополнение баланса) - хранит уникальный идентификатор и сумму пополнения счета пользователя

Пользователь должен иметь следующие возможности:
Авторизоваться по email/password done
Получить данные о себе(id, email, full_name) done
Получить список своих счетов и балансов done
Получить список своих платежей

Администратор должен иметь следующие возможности:
Авторизоваться по email/password done
Получить данные о себе (id, email, full_name) - done
Создать/Удалить/Обновить пользователя done
Получить список пользователей и список его счетов с балансами

Для работы с платежами должен быть реализован роут эмулирующий обработку вебхука от сторонней платежной системы.
Структура json-объекта для обработки вебхука должна состоять из следующих полей:
transaction_id - уникальный идентификатор транзакции в “сторонней системе”
account_id - уникальный идентификатор счета пользователя
user_id - уникальный идентификатор счета пользователя
amount - сумма пополнения счета пользователя
signature - подпись объекта

signature должна формироваться через SHA256 хеш, для строки состоящей из конкатенации значений объекта в алфавитном порядке ключей и “секретного ключа” хранящегося в конфигурации проекта ({account_id}{amount}{transaction_id}{user_id}{secret_key}).

Пример, для secret_key gfdmhghif38yrf9ew0jkf32:
{
  "user_id": "670ed894-e683-478e-bf6e-a05ce159d1ad",
  "account_id": "ff5f091e-5aa0-461d-8a94-a3f7b7d59276",
  "amount": 50,
  "signature": "9ec684cbf68178e6ca5f3bbb3779f96c371e7af83074928034abc042281aedb4",
  "transaction_id": "5eae174f-7cd0-472c-bd36-35660f00132b"
}

При обработке вебхука необходимо:
Проверить подпись объекта done
Проверить существует ли у пользователя такой счет - если нет, его необходимо создать done
Сохранить транзакцию в базе данных done
Начислить сумму транзакции на счет пользователя done

Транзакции являются уникальными, начисление суммы с одним transaction_id должно производиться только один раз.

Для тестирования приложения в миграции должен быть создан:
Тестовый пользователь
Счет тестового пользователя
Тестовый администратор

Для развертывания проекта необходимо реализовать docker compose конфигурацию состоящую из сервиса postgresql и сервиса приложения.
К реализованному заданию должна прилагаться краткая инструкция по запуску проекта в двух вариантах - с использованием docker compose и без него. В инструкции также должны быть предоставлены email/password для пользователя и администратора по умолчанию созданных в миграции.
